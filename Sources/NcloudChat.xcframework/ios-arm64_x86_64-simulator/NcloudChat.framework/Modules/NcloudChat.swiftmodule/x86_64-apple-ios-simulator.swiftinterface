// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios16.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NcloudChat
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
import Apollo
import AuthenticationServices
import CoreTelephony
import Foundation
@_exported import NcloudChat
import SocketIO
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
extension NcloudChat.CloudChat {
  public func sendMessage(channelId: Swift.String, message: Swift.String, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func sendExpressMessage(channelId: Swift.String, message: Swift.String, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func sendImage(channelId: Swift.String, file: Foundation.Data, fileName: Swift.String, mimeType: Swift.String, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func startTyping(channelId: Swift.String, threadId: Swift.String, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func stopTyping(channelId: Swift.String, threadId: Swift.String, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func markRead(channelId: Swift.String, userId: Swift.String, messageId: Swift.String, sortId: Swift.String, option: Swift.String? = "{}", completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func getMessage(channelId: Swift.String, messageId: Swift.String, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func getMessages(filter: Swift.Dictionary<Swift.String, Any>, sort: Swift.Dictionary<Swift.String, Any>?, option: Swift.Dictionary<Swift.String, Any>?, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func unreadCount(channelId: Swift.String, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func getChannel(channelId: Swift.String, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func getChannels(filter: Swift.Dictionary<Swift.String, Any>?, sort: Swift.Dictionary<Swift.String, Any>?, option: Swift.Dictionary<Swift.String, Any>?, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func createChannel(channelType: Swift.String, channelName: Swift.String, uniqueId: Swift.String? = nil, members: [Swift.String]? = [], customField: Swift.String? = "", disabled: Swift.Bool? = nil, mutes: Swift.Bool? = nil, push: Swift.Bool? = nil, imageUrl: Swift.String? = nil, id: Swift.String? = nil, translation: Swift.Bool? = nil, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func updateChannel(channelId: Swift.String, channelType: Swift.String?, channelName: Swift.String?, translation: Swift.Bool?, push: Swift.Bool?, imageUrl: Swift.String?, members: [Swift.String?]?, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func deleteChannel(channelId: Swift.String, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
}
@objc public protocol CloudChatDelegate {
  @objc optional func onConnect()
  @objc optional func onDisconnect()
  @objc optional func onStatusChange(status: Any)
  @objc optional func onMessage(data: Any)
  @objc optional func onStartTyping(data: Any)
  @objc optional func onStopTyping(data: Any)
  @objc optional func onEvent(data: Any)
  @objc optional func onMemberJoined(data: Any)
  @objc optional func onMemberLeaved(data: Any)
  @objc optional func onMemberUpdated(data: Any)
  @objc optional func onMemberDeleted(data: Any)
  @objc optional func onUserBanned(data: Any)
  @objc optional func onUserDeleted(data: Any)
  @objc optional func onUserUpdated(data: Any)
  @objc optional func onReconnect(data: Any)
  @objc optional func onReconnectAttempt(data: Any)
  @objc optional func onResult(data: Any)
  @objc optional func onError(error: Any)
}
public struct User : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class CloudChat {
  public enum Result<Success, Failure> where Failure : Swift.Error {
    case success(Success)
    case failure(Failure)
  }
  public init(projectId: Swift.String, language: Swift.String = "en", completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  @objc deinit
  public static func setDelegate(delegate: NcloudChat.CloudChatDelegate)
  public static func setServerURL(url: Swift.String)
  public static func setSocketURL(url: Swift.String)
  public func isConnected() -> Swift.Bool
  public func connect(userId: Swift.String!, userToken: Swift.String = "", name: Swift.String = "", profile: Swift.String = "", customField: Swift.String = "", completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func disconnect(completionHandler: @escaping (NcloudChat.CloudChat.Result<Any, NcloudChat.CustomError>) -> Swift.Void)
  public func subscribe(channelId: Swift.String, options: Swift.String? = "", completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func unsubscribe(channelId: Swift.String, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func getSubscription(channelId: Swift.String, subscriptionId: Swift.String, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func getSubscriptions(filter: Swift.Dictionary<Swift.String, Any>, option: Swift.Dictionary<Swift.String, Any>, sort: Swift.Dictionary<Swift.String, Any>, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func mute(channelId: Swift.String, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func unmute(channelId: Swift.String, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
}
public struct NoticationInput : Apollo.GraphQLMapConvertible {
  public var graphQLMap: Apollo.GraphQLMap
  public init(token: Swift.Optional<Swift.String?> = nil, device: Swift.Optional<Swift.String?> = nil, os: Swift.Optional<Swift.String?> = nil)
  public var token: Swift.Optional<Swift.String?> {
    get
    set
  }
  public var device: Swift.Optional<Swift.String?> {
    get
    set
  }
  public var os: Swift.Optional<Swift.String?> {
    get
    set
  }
}
public struct MarkInput : Apollo.GraphQLMapConvertible {
  public var graphQLMap: Apollo.GraphQLMap
  public init(userId: Swift.Optional<Swift.String?> = nil, messageId: Swift.Optional<Swift.String?> = nil, sortId: Swift.Optional<Swift.String?> = nil)
  public var userId: Swift.Optional<Swift.String?> {
    get
    set
  }
  public var messageId: Swift.Optional<Swift.String?> {
    get
    set
  }
  public var sortId: Swift.Optional<Swift.String?> {
    get
    set
  }
}
final public class ChannelQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var id: Swift.String?
  final public var projectId: Swift.String
  final public var uniqueId: Swift.String?
  public init(id: Swift.String? = nil, projectId: Swift.String, uniqueId: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(channel: NcloudChat.ChannelQuery.Data.Channel? = nil)
    public var channel: NcloudChat.ChannelQuery.Data.Channel? {
      get
      set
    }
    public struct Channel : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(id: Apollo.GraphQLID, projectId: Swift.String? = nil, name: Swift.String? = nil, userId: NcloudChat.ChannelQuery.Data.Channel.UserId? = nil, uniqueId: Swift.String? = nil, type: Swift.String? = nil, translation: Swift.Bool? = nil, members: [Swift.String?]? = nil, push: Swift.Bool? = nil, linkUrl: Swift.String? = nil, imageUrl: Swift.String? = nil, createdAt: Swift.String? = nil, updatedAt: Swift.String? = nil, lastMessage: NcloudChat.ChannelQuery.Data.Channel.LastMessage? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var id: Apollo.GraphQLID {
        get
        set
      }
      public var projectId: Swift.String? {
        get
        set
      }
      public var name: Swift.String? {
        get
        set
      }
      public var userId: NcloudChat.ChannelQuery.Data.Channel.UserId? {
        get
        set
      }
      public var uniqueId: Swift.String? {
        get
        set
      }
      public var type: Swift.String? {
        get
        set
      }
      public var translation: Swift.Bool? {
        get
        set
      }
      public var members: [Swift.String?]? {
        get
        set
      }
      public var push: Swift.Bool? {
        get
        set
      }
      public var linkUrl: Swift.String? {
        get
        set
      }
      public var imageUrl: Swift.String? {
        get
        set
      }
      public var createdAt: Swift.String? {
        get
        set
      }
      public var updatedAt: Swift.String? {
        get
        set
      }
      public var lastMessage: NcloudChat.ChannelQuery.Data.Channel.LastMessage? {
        get
        set
      }
      public struct UserId : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(id: Apollo.GraphQLID, name: Swift.String? = nil, profile: Swift.String? = nil, deviceType: [Swift.String?]? = nil, language: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var id: Apollo.GraphQLID {
          get
          set
        }
        public var name: Swift.String? {
          get
          set
        }
        public var profile: Swift.String? {
          get
          set
        }
        public var deviceType: [Swift.String?]? {
          get
          set
        }
        public var language: Swift.String? {
          get
          set
        }
      }
      public struct LastMessage : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(messageId: Swift.String, sortId: Swift.String, projectId: Swift.String, channelId: Swift.String, messageType: Swift.String? = nil, mentions: [Swift.String?]? = nil, mentionsEveryone: Swift.String? = nil, has: Swift.String? = nil, sender: NcloudChat.ChannelQuery.Data.Channel.LastMessage.Sender? = nil, admin: NcloudChat.ChannelQuery.Data.Channel.LastMessage.Admin? = nil, content: Swift.String? = nil, createdAt: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var messageId: Swift.String {
          get
          set
        }
        public var sortId: Swift.String {
          get
          set
        }
        public var projectId: Swift.String {
          get
          set
        }
        public var channelId: Swift.String {
          get
          set
        }
        public var messageType: Swift.String? {
          get
          set
        }
        public var mentions: [Swift.String?]? {
          get
          set
        }
        public var mentionsEveryone: Swift.String? {
          get
          set
        }
        public var has: Swift.String? {
          get
          set
        }
        public var sender: NcloudChat.ChannelQuery.Data.Channel.LastMessage.Sender? {
          get
          set
        }
        public var admin: NcloudChat.ChannelQuery.Data.Channel.LastMessage.Admin? {
          get
          set
        }
        public var content: Swift.String? {
          get
          set
        }
        public var createdAt: Swift.String? {
          get
          set
        }
        public struct Sender : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Swift.String? = nil, name: Swift.String? = nil, profile: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Swift.String? {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var profile: Swift.String? {
            get
            set
          }
        }
        public struct Admin : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Swift.String? = nil, name: Swift.String? = nil, profile: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Swift.String? {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var profile: Swift.String? {
            get
            set
          }
        }
      }
    }
  }
  @objc deinit
}
final public class ChannelsQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var filter: Swift.String
  final public var sort: Swift.String?
  final public var option: Swift.String?
  public init(projectId: Swift.String, filter: Swift.String, sort: Swift.String? = nil, option: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(channels: NcloudChat.ChannelsQuery.Data.Channel? = nil)
    public var channels: NcloudChat.ChannelsQuery.Data.Channel? {
      get
      set
    }
    public struct Channel : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(totalCount: Swift.Int, edges: [NcloudChat.ChannelsQuery.Data.Channel.Edge?]? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var totalCount: Swift.Int {
        get
        set
      }
      public var edges: [NcloudChat.ChannelsQuery.Data.Channel.Edge?]? {
        get
        set
      }
      public struct Edge : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(node: NcloudChat.ChannelsQuery.Data.Channel.Edge.Node? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var node: NcloudChat.ChannelsQuery.Data.Channel.Edge.Node? {
          get
          set
        }
        public struct Node : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Apollo.GraphQLID, projectId: Swift.String? = nil, name: Swift.String? = nil, userId: NcloudChat.ChannelsQuery.Data.Channel.Edge.Node.UserId? = nil, uniqueId: Swift.String? = nil, type: Swift.String? = nil, translation: Swift.Bool? = nil, members: [Swift.String?]? = nil, push: Swift.Bool? = nil, linkUrl: Swift.String? = nil, imageUrl: Swift.String? = nil, createdAt: Swift.String? = nil, updatedAt: Swift.String? = nil, lastMessage: NcloudChat.ChannelsQuery.Data.Channel.Edge.Node.LastMessage? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Apollo.GraphQLID {
            get
            set
          }
          public var projectId: Swift.String? {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var userId: NcloudChat.ChannelsQuery.Data.Channel.Edge.Node.UserId? {
            get
            set
          }
          public var uniqueId: Swift.String? {
            get
            set
          }
          public var type: Swift.String? {
            get
            set
          }
          public var translation: Swift.Bool? {
            get
            set
          }
          public var members: [Swift.String?]? {
            get
            set
          }
          public var push: Swift.Bool? {
            get
            set
          }
          public var linkUrl: Swift.String? {
            get
            set
          }
          public var imageUrl: Swift.String? {
            get
            set
          }
          public var createdAt: Swift.String? {
            get
            set
          }
          public var updatedAt: Swift.String? {
            get
            set
          }
          public var lastMessage: NcloudChat.ChannelsQuery.Data.Channel.Edge.Node.LastMessage? {
            get
            set
          }
          public struct UserId : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(id: Apollo.GraphQLID, name: Swift.String? = nil, profile: Swift.String? = nil, deviceType: [Swift.String?]? = nil, language: Swift.String? = nil)
            public var __typename: Swift.String {
              get
              set
            }
            public var id: Apollo.GraphQLID {
              get
              set
            }
            public var name: Swift.String? {
              get
              set
            }
            public var profile: Swift.String? {
              get
              set
            }
            public var deviceType: [Swift.String?]? {
              get
              set
            }
            public var language: Swift.String? {
              get
              set
            }
          }
          public struct LastMessage : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(messageId: Swift.String, sortId: Swift.String, projectId: Swift.String, channelId: Swift.String, messageType: Swift.String? = nil, mentions: [Swift.String?]? = nil, mentionsEveryone: Swift.String? = nil, has: Swift.String? = nil, sender: NcloudChat.ChannelsQuery.Data.Channel.Edge.Node.LastMessage.Sender? = nil, admin: NcloudChat.ChannelsQuery.Data.Channel.Edge.Node.LastMessage.Admin? = nil, content: Swift.String? = nil, createdAt: Swift.String? = nil)
            public var __typename: Swift.String {
              get
              set
            }
            public var messageId: Swift.String {
              get
              set
            }
            public var sortId: Swift.String {
              get
              set
            }
            public var projectId: Swift.String {
              get
              set
            }
            public var channelId: Swift.String {
              get
              set
            }
            public var messageType: Swift.String? {
              get
              set
            }
            public var mentions: [Swift.String?]? {
              get
              set
            }
            public var mentionsEveryone: Swift.String? {
              get
              set
            }
            public var has: Swift.String? {
              get
              set
            }
            public var sender: NcloudChat.ChannelsQuery.Data.Channel.Edge.Node.LastMessage.Sender? {
              get
              set
            }
            public var admin: NcloudChat.ChannelsQuery.Data.Channel.Edge.Node.LastMessage.Admin? {
              get
              set
            }
            public var content: Swift.String? {
              get
              set
            }
            public var createdAt: Swift.String? {
              get
              set
            }
            public struct Sender : Apollo.GraphQLSelectionSet {
              public static let possibleTypes: [Swift.String]
              public static var selections: [Apollo.GraphQLSelection] {
                get
              }
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public init(id: Swift.String? = nil, name: Swift.String? = nil, profile: Swift.String? = nil)
              public var __typename: Swift.String {
                get
                set
              }
              public var id: Swift.String? {
                get
                set
              }
              public var name: Swift.String? {
                get
                set
              }
              public var profile: Swift.String? {
                get
                set
              }
            }
            public struct Admin : Apollo.GraphQLSelectionSet {
              public static let possibleTypes: [Swift.String]
              public static var selections: [Apollo.GraphQLSelection] {
                get
              }
              public var resultMap: Apollo.ResultMap {
                get
              }
              public init(unsafeResultMap: Apollo.ResultMap)
              public init(id: Swift.String? = nil, name: Swift.String? = nil, profile: Swift.String? = nil)
              public var __typename: Swift.String {
                get
                set
              }
              public var id: Swift.String? {
                get
                set
              }
              public var name: Swift.String? {
                get
                set
              }
              public var profile: Swift.String? {
                get
                set
              }
            }
          }
        }
      }
    }
  }
  @objc deinit
}
final public class CreateChannelMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var name: Swift.String
  final public var type: Swift.String
  final public var uniqueId: Swift.String?
  final public var members: [Swift.String?]?
  final public var customField: Swift.String?
  final public var disabled: Swift.Bool?
  final public var mutes: Swift.Bool?
  final public var push: Swift.Bool?
  final public var imageUrl: Swift.String?
  final public var id: Swift.String?
  final public var translation: Swift.Bool?
  public init(projectId: Swift.String, name: Swift.String, type: Swift.String, uniqueId: Swift.String? = nil, members: [Swift.String?]? = nil, customField: Swift.String? = nil, disabled: Swift.Bool? = nil, mutes: Swift.Bool? = nil, push: Swift.Bool? = nil, imageUrl: Swift.String? = nil, id: Swift.String? = nil, translation: Swift.Bool? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(createChannel: NcloudChat.CreateChannelMutation.Data.CreateChannel? = nil)
    public var createChannel: NcloudChat.CreateChannelMutation.Data.CreateChannel? {
      get
      set
    }
    public struct CreateChannel : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(channel: NcloudChat.CreateChannelMutation.Data.CreateChannel.Channel? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var channel: NcloudChat.CreateChannelMutation.Data.CreateChannel.Channel? {
        get
        set
      }
      public struct Channel : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(id: Apollo.GraphQLID, projectId: Swift.String? = nil, name: Swift.String? = nil, userId: NcloudChat.CreateChannelMutation.Data.CreateChannel.Channel.UserId? = nil, uniqueId: Swift.String? = nil, type: Swift.String? = nil, translation: Swift.Bool? = nil, members: [Swift.String?]? = nil, push: Swift.Bool? = nil, linkUrl: Swift.String? = nil, imageUrl: Swift.String? = nil, createdAt: Swift.String? = nil, updatedAt: Swift.String? = nil, lastMessage: NcloudChat.CreateChannelMutation.Data.CreateChannel.Channel.LastMessage? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var id: Apollo.GraphQLID {
          get
          set
        }
        public var projectId: Swift.String? {
          get
          set
        }
        public var name: Swift.String? {
          get
          set
        }
        public var userId: NcloudChat.CreateChannelMutation.Data.CreateChannel.Channel.UserId? {
          get
          set
        }
        public var uniqueId: Swift.String? {
          get
          set
        }
        public var type: Swift.String? {
          get
          set
        }
        public var translation: Swift.Bool? {
          get
          set
        }
        public var members: [Swift.String?]? {
          get
          set
        }
        public var push: Swift.Bool? {
          get
          set
        }
        public var linkUrl: Swift.String? {
          get
          set
        }
        public var imageUrl: Swift.String? {
          get
          set
        }
        public var createdAt: Swift.String? {
          get
          set
        }
        public var updatedAt: Swift.String? {
          get
          set
        }
        public var lastMessage: NcloudChat.CreateChannelMutation.Data.CreateChannel.Channel.LastMessage? {
          get
          set
        }
        public struct UserId : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Apollo.GraphQLID, name: Swift.String? = nil, profile: Swift.String? = nil, deviceType: [Swift.String?]? = nil, language: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Apollo.GraphQLID {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var profile: Swift.String? {
            get
            set
          }
          public var deviceType: [Swift.String?]? {
            get
            set
          }
          public var language: Swift.String? {
            get
            set
          }
        }
        public struct LastMessage : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(messageId: Swift.String, sortId: Swift.String, projectId: Swift.String, channelId: Swift.String, messageType: Swift.String? = nil, mentions: [Swift.String?]? = nil, mentionsEveryone: Swift.String? = nil, has: Swift.String? = nil, sender: NcloudChat.CreateChannelMutation.Data.CreateChannel.Channel.LastMessage.Sender? = nil, admin: NcloudChat.CreateChannelMutation.Data.CreateChannel.Channel.LastMessage.Admin? = nil, content: Swift.String? = nil, createdAt: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var messageId: Swift.String {
            get
            set
          }
          public var sortId: Swift.String {
            get
            set
          }
          public var projectId: Swift.String {
            get
            set
          }
          public var channelId: Swift.String {
            get
            set
          }
          public var messageType: Swift.String? {
            get
            set
          }
          public var mentions: [Swift.String?]? {
            get
            set
          }
          public var mentionsEveryone: Swift.String? {
            get
            set
          }
          public var has: Swift.String? {
            get
            set
          }
          public var sender: NcloudChat.CreateChannelMutation.Data.CreateChannel.Channel.LastMessage.Sender? {
            get
            set
          }
          public var admin: NcloudChat.CreateChannelMutation.Data.CreateChannel.Channel.LastMessage.Admin? {
            get
            set
          }
          public var content: Swift.String? {
            get
            set
          }
          public var createdAt: Swift.String? {
            get
            set
          }
          public struct Sender : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(id: Swift.String? = nil, name: Swift.String? = nil, profile: Swift.String? = nil)
            public var __typename: Swift.String {
              get
              set
            }
            public var id: Swift.String? {
              get
              set
            }
            public var name: Swift.String? {
              get
              set
            }
            public var profile: Swift.String? {
              get
              set
            }
          }
          public struct Admin : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(id: Swift.String? = nil, name: Swift.String? = nil, profile: Swift.String? = nil)
            public var __typename: Swift.String {
              get
              set
            }
            public var id: Swift.String? {
              get
              set
            }
            public var name: Swift.String? {
              get
              set
            }
            public var profile: Swift.String? {
              get
              set
            }
          }
        }
      }
    }
  }
  @objc deinit
}
final public class UpdateChannelMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var name: Swift.String?
  final public var type: Swift.String?
  final public var uniqueId: Swift.String?
  final public var translation: Swift.Bool?
  final public var push: Swift.Bool?
  final public var imageUrl: Swift.String?
  final public var id: Apollo.GraphQLID
  final public var members: [Swift.String?]?
  public init(projectId: Swift.String, name: Swift.String? = nil, type: Swift.String? = nil, uniqueId: Swift.String? = nil, translation: Swift.Bool? = nil, push: Swift.Bool? = nil, imageUrl: Swift.String? = nil, id: Apollo.GraphQLID, members: [Swift.String?]? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(updateChannel: NcloudChat.UpdateChannelMutation.Data.UpdateChannel? = nil)
    public var updateChannel: NcloudChat.UpdateChannelMutation.Data.UpdateChannel? {
      get
      set
    }
    public struct UpdateChannel : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(channel: NcloudChat.UpdateChannelMutation.Data.UpdateChannel.Channel? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var channel: NcloudChat.UpdateChannelMutation.Data.UpdateChannel.Channel? {
        get
        set
      }
      public struct Channel : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(id: Apollo.GraphQLID, projectId: Swift.String? = nil, name: Swift.String? = nil, userId: NcloudChat.UpdateChannelMutation.Data.UpdateChannel.Channel.UserId? = nil, uniqueId: Swift.String? = nil, type: Swift.String? = nil, translation: Swift.Bool? = nil, members: [Swift.String?]? = nil, push: Swift.Bool? = nil, linkUrl: Swift.String? = nil, imageUrl: Swift.String? = nil, createdAt: Swift.String? = nil, updatedAt: Swift.String? = nil, lastMessage: NcloudChat.UpdateChannelMutation.Data.UpdateChannel.Channel.LastMessage? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var id: Apollo.GraphQLID {
          get
          set
        }
        public var projectId: Swift.String? {
          get
          set
        }
        public var name: Swift.String? {
          get
          set
        }
        public var userId: NcloudChat.UpdateChannelMutation.Data.UpdateChannel.Channel.UserId? {
          get
          set
        }
        public var uniqueId: Swift.String? {
          get
          set
        }
        public var type: Swift.String? {
          get
          set
        }
        public var translation: Swift.Bool? {
          get
          set
        }
        public var members: [Swift.String?]? {
          get
          set
        }
        public var push: Swift.Bool? {
          get
          set
        }
        public var linkUrl: Swift.String? {
          get
          set
        }
        public var imageUrl: Swift.String? {
          get
          set
        }
        public var createdAt: Swift.String? {
          get
          set
        }
        public var updatedAt: Swift.String? {
          get
          set
        }
        public var lastMessage: NcloudChat.UpdateChannelMutation.Data.UpdateChannel.Channel.LastMessage? {
          get
          set
        }
        public struct UserId : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Apollo.GraphQLID, name: Swift.String? = nil, profile: Swift.String? = nil, deviceType: [Swift.String?]? = nil, language: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Apollo.GraphQLID {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var profile: Swift.String? {
            get
            set
          }
          public var deviceType: [Swift.String?]? {
            get
            set
          }
          public var language: Swift.String? {
            get
            set
          }
        }
        public struct LastMessage : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(messageId: Swift.String, sortId: Swift.String, projectId: Swift.String, channelId: Swift.String, messageType: Swift.String? = nil, mentions: [Swift.String?]? = nil, mentionsEveryone: Swift.String? = nil, has: Swift.String? = nil, sender: NcloudChat.UpdateChannelMutation.Data.UpdateChannel.Channel.LastMessage.Sender? = nil, admin: NcloudChat.UpdateChannelMutation.Data.UpdateChannel.Channel.LastMessage.Admin? = nil, content: Swift.String? = nil, createdAt: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var messageId: Swift.String {
            get
            set
          }
          public var sortId: Swift.String {
            get
            set
          }
          public var projectId: Swift.String {
            get
            set
          }
          public var channelId: Swift.String {
            get
            set
          }
          public var messageType: Swift.String? {
            get
            set
          }
          public var mentions: [Swift.String?]? {
            get
            set
          }
          public var mentionsEveryone: Swift.String? {
            get
            set
          }
          public var has: Swift.String? {
            get
            set
          }
          public var sender: NcloudChat.UpdateChannelMutation.Data.UpdateChannel.Channel.LastMessage.Sender? {
            get
            set
          }
          public var admin: NcloudChat.UpdateChannelMutation.Data.UpdateChannel.Channel.LastMessage.Admin? {
            get
            set
          }
          public var content: Swift.String? {
            get
            set
          }
          public var createdAt: Swift.String? {
            get
            set
          }
          public struct Sender : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(id: Swift.String? = nil, name: Swift.String? = nil, profile: Swift.String? = nil)
            public var __typename: Swift.String {
              get
              set
            }
            public var id: Swift.String? {
              get
              set
            }
            public var name: Swift.String? {
              get
              set
            }
            public var profile: Swift.String? {
              get
              set
            }
          }
          public struct Admin : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(id: Swift.String? = nil, name: Swift.String? = nil, profile: Swift.String? = nil)
            public var __typename: Swift.String {
              get
              set
            }
            public var id: Swift.String? {
              get
              set
            }
            public var name: Swift.String? {
              get
              set
            }
            public var profile: Swift.String? {
              get
              set
            }
          }
        }
      }
    }
  }
  @objc deinit
}
final public class DeleteChannelMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var id: Apollo.GraphQLID
  public init(projectId: Swift.String, id: Apollo.GraphQLID)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(deleteChannel: NcloudChat.DeleteChannelMutation.Data.DeleteChannel? = nil)
    public var deleteChannel: NcloudChat.DeleteChannelMutation.Data.DeleteChannel? {
      get
      set
    }
    public struct DeleteChannel : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(channel: NcloudChat.DeleteChannelMutation.Data.DeleteChannel.Channel? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var channel: NcloudChat.DeleteChannelMutation.Data.DeleteChannel.Channel? {
        get
        set
      }
      public struct Channel : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(id: Apollo.GraphQLID, projectId: Swift.String? = nil, name: Swift.String? = nil, userId: NcloudChat.DeleteChannelMutation.Data.DeleteChannel.Channel.UserId? = nil, uniqueId: Swift.String? = nil, type: Swift.String? = nil, translation: Swift.Bool? = nil, members: [Swift.String?]? = nil, push: Swift.Bool? = nil, linkUrl: Swift.String? = nil, imageUrl: Swift.String? = nil, createdAt: Swift.String? = nil, updatedAt: Swift.String? = nil, lastMessage: NcloudChat.DeleteChannelMutation.Data.DeleteChannel.Channel.LastMessage? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var id: Apollo.GraphQLID {
          get
          set
        }
        public var projectId: Swift.String? {
          get
          set
        }
        public var name: Swift.String? {
          get
          set
        }
        public var userId: NcloudChat.DeleteChannelMutation.Data.DeleteChannel.Channel.UserId? {
          get
          set
        }
        public var uniqueId: Swift.String? {
          get
          set
        }
        public var type: Swift.String? {
          get
          set
        }
        public var translation: Swift.Bool? {
          get
          set
        }
        public var members: [Swift.String?]? {
          get
          set
        }
        public var push: Swift.Bool? {
          get
          set
        }
        public var linkUrl: Swift.String? {
          get
          set
        }
        public var imageUrl: Swift.String? {
          get
          set
        }
        public var createdAt: Swift.String? {
          get
          set
        }
        public var updatedAt: Swift.String? {
          get
          set
        }
        public var lastMessage: NcloudChat.DeleteChannelMutation.Data.DeleteChannel.Channel.LastMessage? {
          get
          set
        }
        public struct UserId : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Apollo.GraphQLID, name: Swift.String? = nil, profile: Swift.String? = nil, deviceType: [Swift.String?]? = nil, language: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Apollo.GraphQLID {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var profile: Swift.String? {
            get
            set
          }
          public var deviceType: [Swift.String?]? {
            get
            set
          }
          public var language: Swift.String? {
            get
            set
          }
        }
        public struct LastMessage : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(messageId: Swift.String, sortId: Swift.String, projectId: Swift.String, channelId: Swift.String, messageType: Swift.String? = nil, mentions: [Swift.String?]? = nil, mentionsEveryone: Swift.String? = nil, has: Swift.String? = nil, sender: NcloudChat.DeleteChannelMutation.Data.DeleteChannel.Channel.LastMessage.Sender? = nil, admin: NcloudChat.DeleteChannelMutation.Data.DeleteChannel.Channel.LastMessage.Admin? = nil, content: Swift.String? = nil, createdAt: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var messageId: Swift.String {
            get
            set
          }
          public var sortId: Swift.String {
            get
            set
          }
          public var projectId: Swift.String {
            get
            set
          }
          public var channelId: Swift.String {
            get
            set
          }
          public var messageType: Swift.String? {
            get
            set
          }
          public var mentions: [Swift.String?]? {
            get
            set
          }
          public var mentionsEveryone: Swift.String? {
            get
            set
          }
          public var has: Swift.String? {
            get
            set
          }
          public var sender: NcloudChat.DeleteChannelMutation.Data.DeleteChannel.Channel.LastMessage.Sender? {
            get
            set
          }
          public var admin: NcloudChat.DeleteChannelMutation.Data.DeleteChannel.Channel.LastMessage.Admin? {
            get
            set
          }
          public var content: Swift.String? {
            get
            set
          }
          public var createdAt: Swift.String? {
            get
            set
          }
          public struct Sender : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(id: Swift.String? = nil, name: Swift.String? = nil, profile: Swift.String? = nil)
            public var __typename: Swift.String {
              get
              set
            }
            public var id: Swift.String? {
              get
              set
            }
            public var name: Swift.String? {
              get
              set
            }
            public var profile: Swift.String? {
              get
              set
            }
          }
          public struct Admin : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(id: Swift.String? = nil, name: Swift.String? = nil, profile: Swift.String? = nil)
            public var __typename: Swift.String {
              get
              set
            }
            public var id: Swift.String? {
              get
              set
            }
            public var name: Swift.String? {
              get
              set
            }
            public var profile: Swift.String? {
              get
              set
            }
          }
        }
      }
    }
  }
  @objc deinit
}
final public class AddChannelMembersMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var channelId: Swift.String
  final public var memberIds: [Swift.String?]
  public init(projectId: Swift.String, channelId: Swift.String, memberIds: [Swift.String?])
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(addChannelMembers: NcloudChat.AddChannelMembersMutation.Data.AddChannelMember? = nil)
    public var addChannelMembers: NcloudChat.AddChannelMembersMutation.Data.AddChannelMember? {
      get
      set
    }
    public struct AddChannelMember : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(channel: NcloudChat.AddChannelMembersMutation.Data.AddChannelMember.Channel? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var channel: NcloudChat.AddChannelMembersMutation.Data.AddChannelMember.Channel? {
        get
        set
      }
      public struct Channel : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(id: Apollo.GraphQLID, projectId: Swift.String? = nil, name: Swift.String? = nil, userId: NcloudChat.AddChannelMembersMutation.Data.AddChannelMember.Channel.UserId? = nil, uniqueId: Swift.String? = nil, type: Swift.String? = nil, translation: Swift.Bool? = nil, members: [Swift.String?]? = nil, push: Swift.Bool? = nil, linkUrl: Swift.String? = nil, imageUrl: Swift.String? = nil, createdAt: Swift.String? = nil, updatedAt: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var id: Apollo.GraphQLID {
          get
          set
        }
        public var projectId: Swift.String? {
          get
          set
        }
        public var name: Swift.String? {
          get
          set
        }
        public var userId: NcloudChat.AddChannelMembersMutation.Data.AddChannelMember.Channel.UserId? {
          get
          set
        }
        public var uniqueId: Swift.String? {
          get
          set
        }
        public var type: Swift.String? {
          get
          set
        }
        public var translation: Swift.Bool? {
          get
          set
        }
        public var members: [Swift.String?]? {
          get
          set
        }
        public var push: Swift.Bool? {
          get
          set
        }
        public var linkUrl: Swift.String? {
          get
          set
        }
        public var imageUrl: Swift.String? {
          get
          set
        }
        public var createdAt: Swift.String? {
          get
          set
        }
        public var updatedAt: Swift.String? {
          get
          set
        }
        public struct UserId : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Apollo.GraphQLID, name: Swift.String? = nil, profile: Swift.String? = nil, deviceType: [Swift.String?]? = nil, language: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Apollo.GraphQLID {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var profile: Swift.String? {
            get
            set
          }
          public var deviceType: [Swift.String?]? {
            get
            set
          }
          public var language: Swift.String? {
            get
            set
          }
        }
      }
    }
  }
  @objc deinit
}
final public class RemoveChannelMembersMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var channelId: Swift.String
  final public var memberIds: [Swift.String?]
  public init(projectId: Swift.String, channelId: Swift.String, memberIds: [Swift.String?])
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(removeChannelMembers: NcloudChat.RemoveChannelMembersMutation.Data.RemoveChannelMember? = nil)
    public var removeChannelMembers: NcloudChat.RemoveChannelMembersMutation.Data.RemoveChannelMember? {
      get
      set
    }
    public struct RemoveChannelMember : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(channel: NcloudChat.RemoveChannelMembersMutation.Data.RemoveChannelMember.Channel? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var channel: NcloudChat.RemoveChannelMembersMutation.Data.RemoveChannelMember.Channel? {
        get
        set
      }
      public struct Channel : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(id: Apollo.GraphQLID, projectId: Swift.String? = nil, name: Swift.String? = nil, userId: NcloudChat.RemoveChannelMembersMutation.Data.RemoveChannelMember.Channel.UserId? = nil, uniqueId: Swift.String? = nil, type: Swift.String? = nil, translation: Swift.Bool? = nil, members: [Swift.String?]? = nil, push: Swift.Bool? = nil, linkUrl: Swift.String? = nil, imageUrl: Swift.String? = nil, createdAt: Swift.String? = nil, updatedAt: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var id: Apollo.GraphQLID {
          get
          set
        }
        public var projectId: Swift.String? {
          get
          set
        }
        public var name: Swift.String? {
          get
          set
        }
        public var userId: NcloudChat.RemoveChannelMembersMutation.Data.RemoveChannelMember.Channel.UserId? {
          get
          set
        }
        public var uniqueId: Swift.String? {
          get
          set
        }
        public var type: Swift.String? {
          get
          set
        }
        public var translation: Swift.Bool? {
          get
          set
        }
        public var members: [Swift.String?]? {
          get
          set
        }
        public var push: Swift.Bool? {
          get
          set
        }
        public var linkUrl: Swift.String? {
          get
          set
        }
        public var imageUrl: Swift.String? {
          get
          set
        }
        public var createdAt: Swift.String? {
          get
          set
        }
        public var updatedAt: Swift.String? {
          get
          set
        }
        public struct UserId : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Apollo.GraphQLID, name: Swift.String? = nil, profile: Swift.String? = nil, deviceType: [Swift.String?]? = nil, language: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Apollo.GraphQLID {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var profile: Swift.String? {
            get
            set
          }
          public var deviceType: [Swift.String?]? {
            get
            set
          }
          public var language: Swift.String? {
            get
            set
          }
        }
      }
    }
  }
  @objc deinit
}
final public class FriendshipsQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var filter: Swift.String
  final public var sort: Swift.String?
  final public var option: Swift.String?
  public init(projectId: Swift.String, filter: Swift.String, sort: Swift.String? = nil, option: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(friendships: NcloudChat.FriendshipsQuery.Data.Friendship? = nil)
    public var friendships: NcloudChat.FriendshipsQuery.Data.Friendship? {
      get
      set
    }
    public struct Friendship : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(totalCount: Swift.Int, edges: [NcloudChat.FriendshipsQuery.Data.Friendship.Edge?]? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var totalCount: Swift.Int {
        get
        set
      }
      public var edges: [NcloudChat.FriendshipsQuery.Data.Friendship.Edge?]? {
        get
        set
      }
      public struct Edge : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(node: NcloudChat.FriendshipsQuery.Data.Friendship.Edge.Node? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var node: NcloudChat.FriendshipsQuery.Data.Friendship.Edge.Node? {
          get
          set
        }
        public struct Node : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(projectId: Swift.String? = nil, id: Swift.String? = nil, status: Swift.String? = nil, user: NcloudChat.FriendshipsQuery.Data.Friendship.Edge.Node.User? = nil, friend: NcloudChat.FriendshipsQuery.Data.Friendship.Edge.Node.Friend? = nil, friendId: Swift.String? = nil, createdAt: Swift.String? = nil, updatedAt: Swift.String? = nil, requestedAt: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var projectId: Swift.String? {
            get
            set
          }
          public var id: Swift.String? {
            get
            set
          }
          public var status: Swift.String? {
            get
            set
          }
          public var user: NcloudChat.FriendshipsQuery.Data.Friendship.Edge.Node.User? {
            get
            set
          }
          public var friend: NcloudChat.FriendshipsQuery.Data.Friendship.Edge.Node.Friend? {
            get
            set
          }
          public var friendId: Swift.String? {
            get
            set
          }
          public var createdAt: Swift.String? {
            get
            set
          }
          public var updatedAt: Swift.String? {
            get
            set
          }
          public var requestedAt: Swift.String? {
            get
            set
          }
          public struct User : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(id: Apollo.GraphQLID, name: Swift.String? = nil, profile: Swift.String? = nil)
            public var __typename: Swift.String {
              get
              set
            }
            public var id: Apollo.GraphQLID {
              get
              set
            }
            public var name: Swift.String? {
              get
              set
            }
            public var profile: Swift.String? {
              get
              set
            }
          }
          public struct Friend : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(id: Apollo.GraphQLID, name: Swift.String? = nil, profile: Swift.String? = nil)
            public var __typename: Swift.String {
              get
              set
            }
            public var id: Apollo.GraphQLID {
              get
              set
            }
            public var name: Swift.String? {
              get
              set
            }
            public var profile: Swift.String? {
              get
              set
            }
          }
        }
      }
    }
  }
  @objc deinit
}
final public class RequestFriendMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var friendId: Swift.String
  public init(projectId: Swift.String, friendId: Swift.String)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(requestFriend: NcloudChat.RequestFriendMutation.Data.RequestFriend? = nil)
    public var requestFriend: NcloudChat.RequestFriendMutation.Data.RequestFriend? {
      get
      set
    }
    public struct RequestFriend : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(friendship: NcloudChat.RequestFriendMutation.Data.RequestFriend.Friendship? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var friendship: NcloudChat.RequestFriendMutation.Data.RequestFriend.Friendship? {
        get
        set
      }
      public struct Friendship : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(projectId: Swift.String? = nil, id: Swift.String? = nil, status: Swift.String? = nil, user: NcloudChat.RequestFriendMutation.Data.RequestFriend.Friendship.User? = nil, friend: NcloudChat.RequestFriendMutation.Data.RequestFriend.Friendship.Friend? = nil, friendId: Swift.String? = nil, createdAt: Swift.String? = nil, updatedAt: Swift.String? = nil, requestedAt: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var projectId: Swift.String? {
          get
          set
        }
        public var id: Swift.String? {
          get
          set
        }
        public var status: Swift.String? {
          get
          set
        }
        public var user: NcloudChat.RequestFriendMutation.Data.RequestFriend.Friendship.User? {
          get
          set
        }
        public var friend: NcloudChat.RequestFriendMutation.Data.RequestFriend.Friendship.Friend? {
          get
          set
        }
        public var friendId: Swift.String? {
          get
          set
        }
        public var createdAt: Swift.String? {
          get
          set
        }
        public var updatedAt: Swift.String? {
          get
          set
        }
        public var requestedAt: Swift.String? {
          get
          set
        }
        public struct User : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Apollo.GraphQLID, name: Swift.String? = nil, profile: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Apollo.GraphQLID {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var profile: Swift.String? {
            get
            set
          }
        }
        public struct Friend : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Apollo.GraphQLID, name: Swift.String? = nil, profile: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Apollo.GraphQLID {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var profile: Swift.String? {
            get
            set
          }
        }
      }
    }
  }
  @objc deinit
}
final public class AcceptFriendMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var friendId: Swift.String
  public init(projectId: Swift.String, friendId: Swift.String)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(acceptFriend: NcloudChat.AcceptFriendMutation.Data.AcceptFriend? = nil)
    public var acceptFriend: NcloudChat.AcceptFriendMutation.Data.AcceptFriend? {
      get
      set
    }
    public struct AcceptFriend : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(friendship: NcloudChat.AcceptFriendMutation.Data.AcceptFriend.Friendship? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var friendship: NcloudChat.AcceptFriendMutation.Data.AcceptFriend.Friendship? {
        get
        set
      }
      public struct Friendship : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(projectId: Swift.String? = nil, id: Swift.String? = nil, status: Swift.String? = nil, user: NcloudChat.AcceptFriendMutation.Data.AcceptFriend.Friendship.User? = nil, friend: NcloudChat.AcceptFriendMutation.Data.AcceptFriend.Friendship.Friend? = nil, friendId: Swift.String? = nil, createdAt: Swift.String? = nil, updatedAt: Swift.String? = nil, requestedAt: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var projectId: Swift.String? {
          get
          set
        }
        public var id: Swift.String? {
          get
          set
        }
        public var status: Swift.String? {
          get
          set
        }
        public var user: NcloudChat.AcceptFriendMutation.Data.AcceptFriend.Friendship.User? {
          get
          set
        }
        public var friend: NcloudChat.AcceptFriendMutation.Data.AcceptFriend.Friendship.Friend? {
          get
          set
        }
        public var friendId: Swift.String? {
          get
          set
        }
        public var createdAt: Swift.String? {
          get
          set
        }
        public var updatedAt: Swift.String? {
          get
          set
        }
        public var requestedAt: Swift.String? {
          get
          set
        }
        public struct User : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Apollo.GraphQLID, name: Swift.String? = nil, profile: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Apollo.GraphQLID {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var profile: Swift.String? {
            get
            set
          }
        }
        public struct Friend : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Apollo.GraphQLID, name: Swift.String? = nil, profile: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Apollo.GraphQLID {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var profile: Swift.String? {
            get
            set
          }
        }
      }
    }
  }
  @objc deinit
}
final public class RejectFriendMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var friendId: Swift.String
  public init(projectId: Swift.String, friendId: Swift.String)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(rejectFriend: NcloudChat.RejectFriendMutation.Data.RejectFriend? = nil)
    public var rejectFriend: NcloudChat.RejectFriendMutation.Data.RejectFriend? {
      get
      set
    }
    public struct RejectFriend : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(friendship: NcloudChat.RejectFriendMutation.Data.RejectFriend.Friendship? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var friendship: NcloudChat.RejectFriendMutation.Data.RejectFriend.Friendship? {
        get
        set
      }
      public struct Friendship : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(projectId: Swift.String? = nil, id: Swift.String? = nil, status: Swift.String? = nil, user: NcloudChat.RejectFriendMutation.Data.RejectFriend.Friendship.User? = nil, friend: NcloudChat.RejectFriendMutation.Data.RejectFriend.Friendship.Friend? = nil, friendId: Swift.String? = nil, createdAt: Swift.String? = nil, updatedAt: Swift.String? = nil, requestedAt: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var projectId: Swift.String? {
          get
          set
        }
        public var id: Swift.String? {
          get
          set
        }
        public var status: Swift.String? {
          get
          set
        }
        public var user: NcloudChat.RejectFriendMutation.Data.RejectFriend.Friendship.User? {
          get
          set
        }
        public var friend: NcloudChat.RejectFriendMutation.Data.RejectFriend.Friendship.Friend? {
          get
          set
        }
        public var friendId: Swift.String? {
          get
          set
        }
        public var createdAt: Swift.String? {
          get
          set
        }
        public var updatedAt: Swift.String? {
          get
          set
        }
        public var requestedAt: Swift.String? {
          get
          set
        }
        public struct User : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Apollo.GraphQLID, name: Swift.String? = nil, profile: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Apollo.GraphQLID {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var profile: Swift.String? {
            get
            set
          }
        }
        public struct Friend : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Apollo.GraphQLID, name: Swift.String? = nil, profile: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Apollo.GraphQLID {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var profile: Swift.String? {
            get
            set
          }
        }
      }
    }
  }
  @objc deinit
}
final public class RemoveFriendMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var friendId: Swift.String
  public init(projectId: Swift.String, friendId: Swift.String)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(removeFriend: NcloudChat.RemoveFriendMutation.Data.RemoveFriend? = nil)
    public var removeFriend: NcloudChat.RemoveFriendMutation.Data.RemoveFriend? {
      get
      set
    }
    public struct RemoveFriend : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(friendship: NcloudChat.RemoveFriendMutation.Data.RemoveFriend.Friendship? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var friendship: NcloudChat.RemoveFriendMutation.Data.RemoveFriend.Friendship? {
        get
        set
      }
      public struct Friendship : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(projectId: Swift.String? = nil, id: Swift.String? = nil, status: Swift.String? = nil, user: NcloudChat.RemoveFriendMutation.Data.RemoveFriend.Friendship.User? = nil, friend: NcloudChat.RemoveFriendMutation.Data.RemoveFriend.Friendship.Friend? = nil, friendId: Swift.String? = nil, createdAt: Swift.String? = nil, updatedAt: Swift.String? = nil, requestedAt: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var projectId: Swift.String? {
          get
          set
        }
        public var id: Swift.String? {
          get
          set
        }
        public var status: Swift.String? {
          get
          set
        }
        public var user: NcloudChat.RemoveFriendMutation.Data.RemoveFriend.Friendship.User? {
          get
          set
        }
        public var friend: NcloudChat.RemoveFriendMutation.Data.RemoveFriend.Friendship.Friend? {
          get
          set
        }
        public var friendId: Swift.String? {
          get
          set
        }
        public var createdAt: Swift.String? {
          get
          set
        }
        public var updatedAt: Swift.String? {
          get
          set
        }
        public var requestedAt: Swift.String? {
          get
          set
        }
        public struct User : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Apollo.GraphQLID, name: Swift.String? = nil, profile: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Apollo.GraphQLID {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var profile: Swift.String? {
            get
            set
          }
        }
        public struct Friend : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Apollo.GraphQLID, name: Swift.String? = nil, profile: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Apollo.GraphQLID {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var profile: Swift.String? {
            get
            set
          }
        }
      }
    }
  }
  @objc deinit
}
final public class LoginMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var userId: Swift.String
  final public var name: Swift.String?
  final public var profile: Swift.String?
  final public var customField: Swift.String?
  public init(projectId: Swift.String, userId: Swift.String, name: Swift.String? = nil, profile: Swift.String? = nil, customField: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(login: NcloudChat.LoginMutation.Data.Login? = nil)
    public var login: NcloudChat.LoginMutation.Data.Login? {
      get
      set
    }
    public struct Login : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(token: Swift.String? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var token: Swift.String? {
        get
        set
      }
    }
  }
  @objc deinit
}
final public class CreateMemberBlockMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var memberId: Swift.String
  final public var channelId: Swift.String?
  final public var options: Swift.String?
  public init(projectId: Swift.String, memberId: Swift.String, channelId: Swift.String? = nil, options: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(createMemberBlock: NcloudChat.CreateMemberBlockMutation.Data.CreateMemberBlock? = nil)
    public var createMemberBlock: NcloudChat.CreateMemberBlockMutation.Data.CreateMemberBlock? {
      get
      set
    }
    public struct CreateMemberBlock : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(memberBlock: NcloudChat.CreateMemberBlockMutation.Data.CreateMemberBlock.MemberBlock? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var memberBlock: NcloudChat.CreateMemberBlockMutation.Data.CreateMemberBlock.MemberBlock? {
        get
        set
      }
      public struct MemberBlock : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(id: Apollo.GraphQLID, projectId: Swift.String, memberId: Swift.String, type: Swift.String? = nil, status: Swift.Int? = nil, blockType: Swift.Int? = nil, reason: Swift.String? = nil, messageMulti: [NcloudChat.CreateMemberBlockMutation.Data.CreateMemberBlock.MemberBlock.MessageMulti?]? = nil, startedAt: Swift.String? = nil, endedAt: Swift.String? = nil, createdAt: Swift.String? = nil, updatedAt: Swift.String? = nil, deletedAt: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var id: Apollo.GraphQLID {
          get
          set
        }
        public var projectId: Swift.String {
          get
          set
        }
        public var memberId: Swift.String {
          get
          set
        }
        public var type: Swift.String? {
          get
          set
        }
        public var status: Swift.Int? {
          get
          set
        }
        public var blockType: Swift.Int? {
          get
          set
        }
        public var reason: Swift.String? {
          get
          set
        }
        public var messageMulti: [NcloudChat.CreateMemberBlockMutation.Data.CreateMemberBlock.MemberBlock.MessageMulti?]? {
          get
          set
        }
        public var startedAt: Swift.String? {
          get
          set
        }
        public var endedAt: Swift.String? {
          get
          set
        }
        public var createdAt: Swift.String? {
          get
          set
        }
        public var updatedAt: Swift.String? {
          get
          set
        }
        public var deletedAt: Swift.String? {
          get
          set
        }
        public struct MessageMulti : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(lang: Swift.String? = nil, value: Swift.String? = nil, default: Swift.Bool? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var lang: Swift.String? {
            get
            set
          }
          public var value: Swift.String? {
            get
            set
          }
          public var `default`: Swift.Bool? {
            get
            set
          }
        }
      }
    }
  }
  @objc deinit
}
final public class DeleteMemberBlockMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var memberId: Swift.String
  final public var channelId: Swift.String?
  public init(projectId: Swift.String, memberId: Swift.String, channelId: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(deleteMemberBlock: NcloudChat.DeleteMemberBlockMutation.Data.DeleteMemberBlock? = nil)
    public var deleteMemberBlock: NcloudChat.DeleteMemberBlockMutation.Data.DeleteMemberBlock? {
      get
      set
    }
    public struct DeleteMemberBlock : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(memberBlock: NcloudChat.DeleteMemberBlockMutation.Data.DeleteMemberBlock.MemberBlock? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var memberBlock: NcloudChat.DeleteMemberBlockMutation.Data.DeleteMemberBlock.MemberBlock? {
        get
        set
      }
      public struct MemberBlock : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(id: Apollo.GraphQLID, projectId: Swift.String, memberId: Swift.String, type: Swift.String? = nil, status: Swift.Int? = nil, blockType: Swift.Int? = nil, reason: Swift.String? = nil, messageMulti: [NcloudChat.DeleteMemberBlockMutation.Data.DeleteMemberBlock.MemberBlock.MessageMulti?]? = nil, startedAt: Swift.String? = nil, endedAt: Swift.String? = nil, createdAt: Swift.String? = nil, updatedAt: Swift.String? = nil, deletedAt: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var id: Apollo.GraphQLID {
          get
          set
        }
        public var projectId: Swift.String {
          get
          set
        }
        public var memberId: Swift.String {
          get
          set
        }
        public var type: Swift.String? {
          get
          set
        }
        public var status: Swift.Int? {
          get
          set
        }
        public var blockType: Swift.Int? {
          get
          set
        }
        public var reason: Swift.String? {
          get
          set
        }
        public var messageMulti: [NcloudChat.DeleteMemberBlockMutation.Data.DeleteMemberBlock.MemberBlock.MessageMulti?]? {
          get
          set
        }
        public var startedAt: Swift.String? {
          get
          set
        }
        public var endedAt: Swift.String? {
          get
          set
        }
        public var createdAt: Swift.String? {
          get
          set
        }
        public var updatedAt: Swift.String? {
          get
          set
        }
        public var deletedAt: Swift.String? {
          get
          set
        }
        public struct MessageMulti : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(lang: Swift.String? = nil, value: Swift.String? = nil, default: Swift.Bool? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var lang: Swift.String? {
            get
            set
          }
          public var value: Swift.String? {
            get
            set
          }
          public var `default`: Swift.Bool? {
            get
            set
          }
        }
      }
    }
  }
  @objc deinit
}
final public class MembersForQueryQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var option: Swift.String
  final public var filter: Swift.String
  final public var sort: Swift.String?
  public init(projectId: Swift.String, option: Swift.String, filter: Swift.String, sort: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(membersForQuery: NcloudChat.MembersForQueryQuery.Data.MembersForQuery? = nil)
    public var membersForQuery: NcloudChat.MembersForQueryQuery.Data.MembersForQuery? {
      get
      set
    }
    public struct MembersForQuery : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(totalCount: Swift.Int, edges: [NcloudChat.MembersForQueryQuery.Data.MembersForQuery.Edge?]? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var totalCount: Swift.Int {
        get
        set
      }
      public var edges: [NcloudChat.MembersForQueryQuery.Data.MembersForQuery.Edge?]? {
        get
        set
      }
      public struct Edge : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(node: NcloudChat.MembersForQueryQuery.Data.MembersForQuery.Edge.Node? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var node: NcloudChat.MembersForQueryQuery.Data.MembersForQuery.Edge.Node? {
          get
          set
        }
        public struct Node : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Apollo.GraphQLID, name: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Apollo.GraphQLID {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
        }
      }
    }
  }
  @objc deinit
}
final public class UpdateMemberMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var id: Swift.String
  final public var projectId: Swift.String
  final public var name: Swift.String?
  final public var profile: Swift.String?
  final public var adid: Swift.String?
  final public var device: Swift.String?
  final public var push: Swift.Bool?
  final public var network: Swift.String?
  final public var version: Swift.String?
  final public var model: Swift.String?
  final public var notications: NcloudChat.NoticationInput?
  public init(id: Swift.String, projectId: Swift.String, name: Swift.String? = nil, profile: Swift.String? = nil, adid: Swift.String? = nil, device: Swift.String? = nil, push: Swift.Bool? = nil, network: Swift.String? = nil, version: Swift.String? = nil, model: Swift.String? = nil, notications: NcloudChat.NoticationInput? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(updateMember: NcloudChat.UpdateMemberMutation.Data.UpdateMember? = nil)
    public var updateMember: NcloudChat.UpdateMemberMutation.Data.UpdateMember? {
      get
      set
    }
    public struct UpdateMember : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(member: NcloudChat.UpdateMemberMutation.Data.UpdateMember.Member? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var member: NcloudChat.UpdateMemberMutation.Data.UpdateMember.Member? {
        get
        set
      }
      public struct Member : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(id: Apollo.GraphQLID, projectId: Swift.String, name: Swift.String? = nil, profile: Swift.String? = nil, country: Swift.String? = nil, memo: Swift.String? = nil, remoteip: Swift.String? = nil, adid: Swift.String? = nil, device: Swift.String? = nil, network: Swift.String? = nil, push: Swift.Bool? = nil, version: Swift.String? = nil, model: Swift.String? = nil, loginedAt: Swift.String? = nil, createdAt: Swift.String? = nil, updatedAt: Swift.String? = nil, notications: NcloudChat.UpdateMemberMutation.Data.UpdateMember.Member.Notication? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var id: Apollo.GraphQLID {
          get
          set
        }
        public var projectId: Swift.String {
          get
          set
        }
        public var name: Swift.String? {
          get
          set
        }
        public var profile: Swift.String? {
          get
          set
        }
        public var country: Swift.String? {
          get
          set
        }
        public var memo: Swift.String? {
          get
          set
        }
        public var remoteip: Swift.String? {
          get
          set
        }
        public var adid: Swift.String? {
          get
          set
        }
        public var device: Swift.String? {
          get
          set
        }
        public var network: Swift.String? {
          get
          set
        }
        public var push: Swift.Bool? {
          get
          set
        }
        public var version: Swift.String? {
          get
          set
        }
        public var model: Swift.String? {
          get
          set
        }
        public var loginedAt: Swift.String? {
          get
          set
        }
        public var createdAt: Swift.String? {
          get
          set
        }
        public var updatedAt: Swift.String? {
          get
          set
        }
        public var notications: NcloudChat.UpdateMemberMutation.Data.UpdateMember.Member.Notication? {
          get
          set
        }
        public struct Notication : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(token: Swift.String? = nil, device: Swift.String? = nil, os: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var token: Swift.String? {
            get
            set
          }
          public var device: Swift.String? {
            get
            set
          }
          public var os: Swift.String? {
            get
            set
          }
        }
      }
    }
  }
  @objc deinit
}
final public class MessageQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var channelId: Swift.String
  final public var id: Apollo.GraphQLID
  public init(projectId: Swift.String, channelId: Swift.String, id: Apollo.GraphQLID)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(message: NcloudChat.MessageQuery.Data.Message? = nil)
    public var message: NcloudChat.MessageQuery.Data.Message? {
      get
      set
    }
    public struct Message : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(id: Apollo.GraphQLID, messageId: Swift.String, channelId: Swift.String, sortId: Swift.String, messageType: Swift.String? = nil, sender: NcloudChat.MessageQuery.Data.Message.Sender? = nil, admin: NcloudChat.MessageQuery.Data.Message.Admin? = nil, mentions: [Swift.String?]? = nil, mentionsEveryone: Swift.String? = nil, content: Swift.String? = nil, sendedAt: Swift.String? = nil, createdAt: Swift.String? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var id: Apollo.GraphQLID {
        get
        set
      }
      public var messageId: Swift.String {
        get
        set
      }
      public var channelId: Swift.String {
        get
        set
      }
      public var sortId: Swift.String {
        get
        set
      }
      public var messageType: Swift.String? {
        get
        set
      }
      public var sender: NcloudChat.MessageQuery.Data.Message.Sender? {
        get
        set
      }
      public var admin: NcloudChat.MessageQuery.Data.Message.Admin? {
        get
        set
      }
      public var mentions: [Swift.String?]? {
        get
        set
      }
      public var mentionsEveryone: Swift.String? {
        get
        set
      }
      public var content: Swift.String? {
        get
        set
      }
      public var sendedAt: Swift.String? {
        get
        set
      }
      public var createdAt: Swift.String? {
        get
        set
      }
      public struct Sender : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(id: Swift.String? = nil, name: Swift.String? = nil, profile: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var id: Swift.String? {
          get
          set
        }
        public var name: Swift.String? {
          get
          set
        }
        public var profile: Swift.String? {
          get
          set
        }
      }
      public struct Admin : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(id: Swift.String? = nil, name: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var id: Swift.String? {
          get
          set
        }
        public var name: Swift.String? {
          get
          set
        }
      }
    }
  }
  @objc deinit
}
final public class MessagesQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var filter: Swift.String
  final public var option: Swift.String?
  final public var sort: Swift.String?
  public init(projectId: Swift.String, filter: Swift.String, option: Swift.String? = nil, sort: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(messages: NcloudChat.MessagesQuery.Data.Message? = nil)
    public var messages: NcloudChat.MessagesQuery.Data.Message? {
      get
      set
    }
    public struct Message : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(totalCount: Swift.Int, edges: [NcloudChat.MessagesQuery.Data.Message.Edge?]? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var totalCount: Swift.Int {
        get
        set
      }
      public var edges: [NcloudChat.MessagesQuery.Data.Message.Edge?]? {
        get
        set
      }
      public struct Edge : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(node: NcloudChat.MessagesQuery.Data.Message.Edge.Node? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var node: NcloudChat.MessagesQuery.Data.Message.Edge.Node? {
          get
          set
        }
        public struct Node : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Apollo.GraphQLID, messageId: Swift.String, channelId: Swift.String, sortId: Swift.String, messageType: Swift.String? = nil, sender: NcloudChat.MessagesQuery.Data.Message.Edge.Node.Sender? = nil, admin: NcloudChat.MessagesQuery.Data.Message.Edge.Node.Admin? = nil, mentions: [Swift.String?]? = nil, mentionsEveryone: Swift.String? = nil, content: Swift.String? = nil, sendedAt: Swift.String? = nil, createdAt: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Apollo.GraphQLID {
            get
            set
          }
          public var messageId: Swift.String {
            get
            set
          }
          public var channelId: Swift.String {
            get
            set
          }
          public var sortId: Swift.String {
            get
            set
          }
          public var messageType: Swift.String? {
            get
            set
          }
          public var sender: NcloudChat.MessagesQuery.Data.Message.Edge.Node.Sender? {
            get
            set
          }
          public var admin: NcloudChat.MessagesQuery.Data.Message.Edge.Node.Admin? {
            get
            set
          }
          public var mentions: [Swift.String?]? {
            get
            set
          }
          public var mentionsEveryone: Swift.String? {
            get
            set
          }
          public var content: Swift.String? {
            get
            set
          }
          public var sendedAt: Swift.String? {
            get
            set
          }
          public var createdAt: Swift.String? {
            get
            set
          }
          public struct Sender : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(id: Swift.String? = nil, name: Swift.String? = nil, profile: Swift.String? = nil)
            public var __typename: Swift.String {
              get
              set
            }
            public var id: Swift.String? {
              get
              set
            }
            public var name: Swift.String? {
              get
              set
            }
            public var profile: Swift.String? {
              get
              set
            }
          }
          public struct Admin : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(id: Swift.String? = nil, name: Swift.String? = nil)
            public var __typename: Swift.String {
              get
              set
            }
            public var id: Swift.String? {
              get
              set
            }
            public var name: Swift.String? {
              get
              set
            }
          }
        }
      }
    }
  }
  @objc deinit
}
final public class MarkQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var channelId: Swift.String
  public init(projectId: Swift.String, channelId: Swift.String)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(mark: NcloudChat.MarkQuery.Data.Mark? = nil)
    public var mark: NcloudChat.MarkQuery.Data.Mark? {
      get
      set
    }
    public struct Mark : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(userId: Swift.String? = nil, messageId: Swift.String? = nil, sortId: Swift.String? = nil, unread: Swift.Int? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var userId: Swift.String? {
        get
        set
      }
      public var messageId: Swift.String? {
        get
        set
      }
      public var sortId: Swift.String? {
        get
        set
      }
      public var unread: Swift.Int? {
        get
        set
      }
    }
  }
  @objc deinit
}
final public class CreateChannelMessageMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var channelId: Swift.String
  final public var content: Swift.String
  public init(projectId: Swift.String, channelId: Swift.String, content: Swift.String)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(createChannelMessage: NcloudChat.CreateChannelMessageMutation.Data.CreateChannelMessage? = nil)
    public var createChannelMessage: NcloudChat.CreateChannelMessageMutation.Data.CreateChannelMessage? {
      get
      set
    }
    public struct CreateChannelMessage : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(message: NcloudChat.CreateChannelMessageMutation.Data.CreateChannelMessage.Message? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var message: NcloudChat.CreateChannelMessageMutation.Data.CreateChannelMessage.Message? {
        get
        set
      }
      public struct Message : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(id: Apollo.GraphQLID, messageId: Swift.String, channelId: Swift.String, sortId: Swift.String, messageType: Swift.String? = nil, sender: NcloudChat.CreateChannelMessageMutation.Data.CreateChannelMessage.Message.Sender? = nil, admin: NcloudChat.CreateChannelMessageMutation.Data.CreateChannelMessage.Message.Admin? = nil, attachmentFilenames: NcloudChat.CreateChannelMessageMutation.Data.CreateChannelMessage.Message.AttachmentFilename? = nil, has: Swift.String? = nil, embedProviders: Swift.String? = nil, embedType: Swift.String? = nil, isExpress: Swift.Bool? = nil, linkHostnames: Swift.String? = nil, mentions: [Swift.String?]? = nil, bytes: Swift.Int? = nil, mentionsEveryone: Swift.String? = nil, content: Swift.String? = nil, sendedAt: Swift.String? = nil, createdAt: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var id: Apollo.GraphQLID {
          get
          set
        }
        public var messageId: Swift.String {
          get
          set
        }
        public var channelId: Swift.String {
          get
          set
        }
        public var sortId: Swift.String {
          get
          set
        }
        public var messageType: Swift.String? {
          get
          set
        }
        public var sender: NcloudChat.CreateChannelMessageMutation.Data.CreateChannelMessage.Message.Sender? {
          get
          set
        }
        public var admin: NcloudChat.CreateChannelMessageMutation.Data.CreateChannelMessage.Message.Admin? {
          get
          set
        }
        public var attachmentFilenames: NcloudChat.CreateChannelMessageMutation.Data.CreateChannelMessage.Message.AttachmentFilename? {
          get
          set
        }
        public var has: Swift.String? {
          get
          set
        }
        public var embedProviders: Swift.String? {
          get
          set
        }
        public var embedType: Swift.String? {
          get
          set
        }
        public var isExpress: Swift.Bool? {
          get
          set
        }
        public var linkHostnames: Swift.String? {
          get
          set
        }
        public var mentions: [Swift.String?]? {
          get
          set
        }
        public var bytes: Swift.Int? {
          get
          set
        }
        public var mentionsEveryone: Swift.String? {
          get
          set
        }
        public var content: Swift.String? {
          get
          set
        }
        public var sendedAt: Swift.String? {
          get
          set
        }
        public var createdAt: Swift.String? {
          get
          set
        }
        public struct Sender : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Swift.String? = nil, name: Swift.String? = nil, profile: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Swift.String? {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var profile: Swift.String? {
            get
            set
          }
        }
        public struct Admin : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Swift.String? = nil, name: Swift.String? = nil, profile: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Swift.String? {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var profile: Swift.String? {
            get
            set
          }
        }
        public struct AttachmentFilename : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(name: Swift.String? = nil, size: Swift.Double? = nil, type: Swift.String? = nil, url: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var size: Swift.Double? {
            get
            set
          }
          public var type: Swift.String? {
            get
            set
          }
          public var url: Swift.String? {
            get
            set
          }
        }
      }
    }
  }
  @objc deinit
}
final public class PinQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var channelId: Swift.String
  final public var id: Swift.String
  public init(projectId: Swift.String, channelId: Swift.String, id: Swift.String)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(pin: NcloudChat.PinQuery.Data.Pin? = nil)
    public var pin: NcloudChat.PinQuery.Data.Pin? {
      get
      set
    }
    public struct Pin : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(id: Apollo.GraphQLID, projectId: Swift.String, channelId: Swift.String, pinned: Swift.Bool, pinnedAt: Swift.String? = nil, userId: NcloudChat.PinQuery.Data.Pin.UserId? = nil, expiredAt: Swift.String? = nil, createdAt: Swift.String? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var id: Apollo.GraphQLID {
        get
        set
      }
      public var projectId: Swift.String {
        get
        set
      }
      public var channelId: Swift.String {
        get
        set
      }
      public var pinned: Swift.Bool {
        get
        set
      }
      public var pinnedAt: Swift.String? {
        get
        set
      }
      public var userId: NcloudChat.PinQuery.Data.Pin.UserId? {
        get
        set
      }
      public var expiredAt: Swift.String? {
        get
        set
      }
      public var createdAt: Swift.String? {
        get
        set
      }
      public struct UserId : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(id: Apollo.GraphQLID, name: Swift.String? = nil, profile: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var id: Apollo.GraphQLID {
          get
          set
        }
        public var name: Swift.String? {
          get
          set
        }
        public var profile: Swift.String? {
          get
          set
        }
      }
    }
  }
  @objc deinit
}
final public class PinsQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var channelId: Swift.String
  final public var filter: Swift.String
  final public var option: Swift.String?
  final public var sort: Swift.String?
  public init(projectId: Swift.String, channelId: Swift.String, filter: Swift.String, option: Swift.String? = nil, sort: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(pins: NcloudChat.PinsQuery.Data.Pin? = nil)
    public var pins: NcloudChat.PinsQuery.Data.Pin? {
      get
      set
    }
    public struct Pin : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(totalCount: Swift.Int, edges: [NcloudChat.PinsQuery.Data.Pin.Edge?]? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var totalCount: Swift.Int {
        get
        set
      }
      public var edges: [NcloudChat.PinsQuery.Data.Pin.Edge?]? {
        get
        set
      }
      public struct Edge : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(node: NcloudChat.PinsQuery.Data.Pin.Edge.Node? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var node: NcloudChat.PinsQuery.Data.Pin.Edge.Node? {
          get
          set
        }
        public struct Node : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Apollo.GraphQLID, projectId: Swift.String, channelId: Swift.String, pinned: Swift.Bool, pinnedAt: Swift.String? = nil, userId: NcloudChat.PinsQuery.Data.Pin.Edge.Node.UserId? = nil, expiredAt: Swift.String? = nil, createdAt: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Apollo.GraphQLID {
            get
            set
          }
          public var projectId: Swift.String {
            get
            set
          }
          public var channelId: Swift.String {
            get
            set
          }
          public var pinned: Swift.Bool {
            get
            set
          }
          public var pinnedAt: Swift.String? {
            get
            set
          }
          public var userId: NcloudChat.PinsQuery.Data.Pin.Edge.Node.UserId? {
            get
            set
          }
          public var expiredAt: Swift.String? {
            get
            set
          }
          public var createdAt: Swift.String? {
            get
            set
          }
          public struct UserId : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(id: Apollo.GraphQLID, name: Swift.String? = nil, profile: Swift.String? = nil)
            public var __typename: Swift.String {
              get
              set
            }
            public var id: Apollo.GraphQLID {
              get
              set
            }
            public var name: Swift.String? {
              get
              set
            }
            public var profile: Swift.String? {
              get
              set
            }
          }
        }
      }
    }
  }
  @objc deinit
}
final public class CreatePinMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var channelId: Swift.String
  final public var pinned: Swift.Bool
  final public var pinnedAt: Swift.String?
  final public var expiredAt: Swift.String?
  public init(projectId: Swift.String, channelId: Swift.String, pinned: Swift.Bool, pinnedAt: Swift.String? = nil, expiredAt: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(createPin: NcloudChat.CreatePinMutation.Data.CreatePin? = nil)
    public var createPin: NcloudChat.CreatePinMutation.Data.CreatePin? {
      get
      set
    }
    public struct CreatePin : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(pin: NcloudChat.CreatePinMutation.Data.CreatePin.Pin? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var pin: NcloudChat.CreatePinMutation.Data.CreatePin.Pin? {
        get
        set
      }
      public struct Pin : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(id: Apollo.GraphQLID, projectId: Swift.String, channelId: Swift.String, pinned: Swift.Bool, pinnedAt: Swift.String? = nil, userId: NcloudChat.CreatePinMutation.Data.CreatePin.Pin.UserId? = nil, expiredAt: Swift.String? = nil, createdAt: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var id: Apollo.GraphQLID {
          get
          set
        }
        public var projectId: Swift.String {
          get
          set
        }
        public var channelId: Swift.String {
          get
          set
        }
        public var pinned: Swift.Bool {
          get
          set
        }
        public var pinnedAt: Swift.String? {
          get
          set
        }
        public var userId: NcloudChat.CreatePinMutation.Data.CreatePin.Pin.UserId? {
          get
          set
        }
        public var expiredAt: Swift.String? {
          get
          set
        }
        public var createdAt: Swift.String? {
          get
          set
        }
        public struct UserId : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Apollo.GraphQLID, name: Swift.String? = nil, profile: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Apollo.GraphQLID {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var profile: Swift.String? {
            get
            set
          }
        }
      }
    }
  }
  @objc deinit
}
final public class UpdatePinMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var id: Apollo.GraphQLID
  final public var projectId: Swift.String
  final public var channelId: Swift.String
  final public var pinned: Swift.Bool
  final public var pinnedAt: Swift.String?
  final public var expiredAt: Swift.String?
  public init(id: Apollo.GraphQLID, projectId: Swift.String, channelId: Swift.String, pinned: Swift.Bool, pinnedAt: Swift.String? = nil, expiredAt: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(updatePin: NcloudChat.UpdatePinMutation.Data.UpdatePin? = nil)
    public var updatePin: NcloudChat.UpdatePinMutation.Data.UpdatePin? {
      get
      set
    }
    public struct UpdatePin : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(pin: NcloudChat.UpdatePinMutation.Data.UpdatePin.Pin? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var pin: NcloudChat.UpdatePinMutation.Data.UpdatePin.Pin? {
        get
        set
      }
      public struct Pin : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(id: Apollo.GraphQLID, projectId: Swift.String, channelId: Swift.String, pinned: Swift.Bool, pinnedAt: Swift.String? = nil, userId: NcloudChat.UpdatePinMutation.Data.UpdatePin.Pin.UserId? = nil, expiredAt: Swift.String? = nil, createdAt: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var id: Apollo.GraphQLID {
          get
          set
        }
        public var projectId: Swift.String {
          get
          set
        }
        public var channelId: Swift.String {
          get
          set
        }
        public var pinned: Swift.Bool {
          get
          set
        }
        public var pinnedAt: Swift.String? {
          get
          set
        }
        public var userId: NcloudChat.UpdatePinMutation.Data.UpdatePin.Pin.UserId? {
          get
          set
        }
        public var expiredAt: Swift.String? {
          get
          set
        }
        public var createdAt: Swift.String? {
          get
          set
        }
        public struct UserId : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Apollo.GraphQLID, name: Swift.String? = nil, profile: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Apollo.GraphQLID {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var profile: Swift.String? {
            get
            set
          }
        }
      }
    }
  }
  @objc deinit
}
final public class ProjectQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var id: Apollo.GraphQLID
  public init(id: Apollo.GraphQLID)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(project: NcloudChat.ProjectQuery.Data.Project? = nil)
    public var project: NcloudChat.ProjectQuery.Data.Project? {
      get
      set
    }
    public struct Project : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(ncpProjectId: Swift.String, name: Swift.String? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var ncpProjectId: Swift.String {
        get
        set
      }
      public var name: Swift.String? {
        get
        set
      }
    }
  }
  @objc deinit
}
final public class CreateSubscriptionMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var channelId: Swift.String
  final public var option: Swift.String?
  public init(projectId: Swift.String, channelId: Swift.String, option: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(createSubscription: NcloudChat.CreateSubscriptionMutation.Data.CreateSubscription? = nil)
    public var createSubscription: NcloudChat.CreateSubscriptionMutation.Data.CreateSubscription? {
      get
      set
    }
    public struct CreateSubscription : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(subscription: NcloudChat.CreateSubscriptionMutation.Data.CreateSubscription.Subscription? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var subscription: NcloudChat.CreateSubscriptionMutation.Data.CreateSubscription.Subscription? {
        get
        set
      }
      public struct Subscription : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(id: Apollo.GraphQLID, channelId: Swift.String, userId: Swift.String, language: Swift.String? = nil, push: Swift.Bool? = nil, mute: Swift.Bool? = nil, online: Swift.Bool? = nil, channel: NcloudChat.CreateSubscriptionMutation.Data.CreateSubscription.Subscription.Channel? = nil, mark: NcloudChat.CreateSubscriptionMutation.Data.CreateSubscription.Subscription.Mark? = nil, uniquekey: Swift.String? = nil, createdAt: Swift.String? = nil, updatedAt: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var id: Apollo.GraphQLID {
          get
          set
        }
        public var channelId: Swift.String {
          get
          set
        }
        public var userId: Swift.String {
          get
          set
        }
        public var language: Swift.String? {
          get
          set
        }
        public var push: Swift.Bool? {
          get
          set
        }
        public var mute: Swift.Bool? {
          get
          set
        }
        public var online: Swift.Bool? {
          get
          set
        }
        public var channel: NcloudChat.CreateSubscriptionMutation.Data.CreateSubscription.Subscription.Channel? {
          get
          set
        }
        public var mark: NcloudChat.CreateSubscriptionMutation.Data.CreateSubscription.Subscription.Mark? {
          get
          set
        }
        public var uniquekey: Swift.String? {
          get
          set
        }
        public var createdAt: Swift.String? {
          get
          set
        }
        public var updatedAt: Swift.String? {
          get
          set
        }
        public struct Channel : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(name: Swift.String? = nil, type: Swift.String? = nil, imageUrl: Swift.String? = nil, push: Swift.Bool? = nil, disabled: Swift.Bool? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var type: Swift.String? {
            get
            set
          }
          public var imageUrl: Swift.String? {
            get
            set
          }
          public var push: Swift.Bool? {
            get
            set
          }
          public var disabled: Swift.Bool? {
            get
            set
          }
        }
        public struct Mark : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(userId: Swift.String? = nil, messageId: Swift.String? = nil, sortId: Swift.String? = nil, unread: Swift.Int? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var userId: Swift.String? {
            get
            set
          }
          public var messageId: Swift.String? {
            get
            set
          }
          public var sortId: Swift.String? {
            get
            set
          }
          public var unread: Swift.Int? {
            get
            set
          }
        }
      }
    }
  }
  @objc deinit
}
final public class DeleteSubscriptionMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var channelId: Swift.String
  public init(projectId: Swift.String, channelId: Swift.String)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(deleteSubscription: NcloudChat.DeleteSubscriptionMutation.Data.DeleteSubscription? = nil)
    public var deleteSubscription: NcloudChat.DeleteSubscriptionMutation.Data.DeleteSubscription? {
      get
      set
    }
    public struct DeleteSubscription : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(subscription: NcloudChat.DeleteSubscriptionMutation.Data.DeleteSubscription.Subscription? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var subscription: NcloudChat.DeleteSubscriptionMutation.Data.DeleteSubscription.Subscription? {
        get
        set
      }
      public struct Subscription : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(id: Apollo.GraphQLID, channelId: Swift.String, userId: Swift.String, language: Swift.String? = nil, push: Swift.Bool? = nil, mute: Swift.Bool? = nil, online: Swift.Bool? = nil, channel: NcloudChat.DeleteSubscriptionMutation.Data.DeleteSubscription.Subscription.Channel? = nil, mark: NcloudChat.DeleteSubscriptionMutation.Data.DeleteSubscription.Subscription.Mark? = nil, uniquekey: Swift.String? = nil, createdAt: Swift.String? = nil, updatedAt: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var id: Apollo.GraphQLID {
          get
          set
        }
        public var channelId: Swift.String {
          get
          set
        }
        public var userId: Swift.String {
          get
          set
        }
        public var language: Swift.String? {
          get
          set
        }
        public var push: Swift.Bool? {
          get
          set
        }
        public var mute: Swift.Bool? {
          get
          set
        }
        public var online: Swift.Bool? {
          get
          set
        }
        public var channel: NcloudChat.DeleteSubscriptionMutation.Data.DeleteSubscription.Subscription.Channel? {
          get
          set
        }
        public var mark: NcloudChat.DeleteSubscriptionMutation.Data.DeleteSubscription.Subscription.Mark? {
          get
          set
        }
        public var uniquekey: Swift.String? {
          get
          set
        }
        public var createdAt: Swift.String? {
          get
          set
        }
        public var updatedAt: Swift.String? {
          get
          set
        }
        public struct Channel : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(name: Swift.String? = nil, type: Swift.String? = nil, imageUrl: Swift.String? = nil, push: Swift.Bool? = nil, disabled: Swift.Bool? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var type: Swift.String? {
            get
            set
          }
          public var imageUrl: Swift.String? {
            get
            set
          }
          public var push: Swift.Bool? {
            get
            set
          }
          public var disabled: Swift.Bool? {
            get
            set
          }
        }
        public struct Mark : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(userId: Swift.String? = nil, messageId: Swift.String? = nil, sortId: Swift.String? = nil, unread: Swift.Int? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var userId: Swift.String? {
            get
            set
          }
          public var messageId: Swift.String? {
            get
            set
          }
          public var sortId: Swift.String? {
            get
            set
          }
          public var unread: Swift.Int? {
            get
            set
          }
        }
      }
    }
  }
  @objc deinit
}
final public class UpdateSubscriptionMutation : Apollo.GraphQLMutation {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var channelId: Swift.String
  final public var mark: NcloudChat.MarkInput?
  final public var option: Swift.String
  public init(projectId: Swift.String, channelId: Swift.String, mark: NcloudChat.MarkInput? = nil, option: Swift.String)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(updateSubscription: NcloudChat.UpdateSubscriptionMutation.Data.UpdateSubscription? = nil)
    public var updateSubscription: NcloudChat.UpdateSubscriptionMutation.Data.UpdateSubscription? {
      get
      set
    }
    public struct UpdateSubscription : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(subscription: NcloudChat.UpdateSubscriptionMutation.Data.UpdateSubscription.Subscription? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var subscription: NcloudChat.UpdateSubscriptionMutation.Data.UpdateSubscription.Subscription? {
        get
        set
      }
      public struct Subscription : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(id: Apollo.GraphQLID, channelId: Swift.String, userId: Swift.String, language: Swift.String? = nil, push: Swift.Bool? = nil, mute: Swift.Bool? = nil, online: Swift.Bool? = nil, channel: NcloudChat.UpdateSubscriptionMutation.Data.UpdateSubscription.Subscription.Channel? = nil, mark: NcloudChat.UpdateSubscriptionMutation.Data.UpdateSubscription.Subscription.Mark? = nil, uniquekey: Swift.String? = nil, createdAt: Swift.String? = nil, updatedAt: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var id: Apollo.GraphQLID {
          get
          set
        }
        public var channelId: Swift.String {
          get
          set
        }
        public var userId: Swift.String {
          get
          set
        }
        public var language: Swift.String? {
          get
          set
        }
        public var push: Swift.Bool? {
          get
          set
        }
        public var mute: Swift.Bool? {
          get
          set
        }
        public var online: Swift.Bool? {
          get
          set
        }
        public var channel: NcloudChat.UpdateSubscriptionMutation.Data.UpdateSubscription.Subscription.Channel? {
          get
          set
        }
        public var mark: NcloudChat.UpdateSubscriptionMutation.Data.UpdateSubscription.Subscription.Mark? {
          get
          set
        }
        public var uniquekey: Swift.String? {
          get
          set
        }
        public var createdAt: Swift.String? {
          get
          set
        }
        public var updatedAt: Swift.String? {
          get
          set
        }
        public struct Channel : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(name: Swift.String? = nil, type: Swift.String? = nil, imageUrl: Swift.String? = nil, push: Swift.Bool? = nil, disabled: Swift.Bool? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var name: Swift.String? {
            get
            set
          }
          public var type: Swift.String? {
            get
            set
          }
          public var imageUrl: Swift.String? {
            get
            set
          }
          public var push: Swift.Bool? {
            get
            set
          }
          public var disabled: Swift.Bool? {
            get
            set
          }
        }
        public struct Mark : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(userId: Swift.String? = nil, messageId: Swift.String? = nil, sortId: Swift.String? = nil, unread: Swift.Int? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var userId: Swift.String? {
            get
            set
          }
          public var messageId: Swift.String? {
            get
            set
          }
          public var sortId: Swift.String? {
            get
            set
          }
          public var unread: Swift.Int? {
            get
            set
          }
        }
      }
    }
  }
  @objc deinit
}
final public class SubscriptionQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var channelId: Swift.String
  final public var id: Swift.String
  public init(projectId: Swift.String, channelId: Swift.String, id: Swift.String)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(subscription: NcloudChat.SubscriptionQuery.Data.Subscription? = nil)
    public var subscription: NcloudChat.SubscriptionQuery.Data.Subscription? {
      get
      set
    }
    public struct Subscription : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(id: Apollo.GraphQLID, user: NcloudChat.SubscriptionQuery.Data.Subscription.User? = nil, mark: NcloudChat.SubscriptionQuery.Data.Subscription.Mark? = nil, channelId: Swift.String, userId: Swift.String, online: Swift.Bool? = nil, push: Swift.Bool? = nil, createdAt: Swift.String? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var id: Apollo.GraphQLID {
        get
        set
      }
      public var user: NcloudChat.SubscriptionQuery.Data.Subscription.User? {
        get
        set
      }
      public var mark: NcloudChat.SubscriptionQuery.Data.Subscription.Mark? {
        get
        set
      }
      public var channelId: Swift.String {
        get
        set
      }
      public var userId: Swift.String {
        get
        set
      }
      public var online: Swift.Bool? {
        get
        set
      }
      public var push: Swift.Bool? {
        get
        set
      }
      public var createdAt: Swift.String? {
        get
        set
      }
      public struct User : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(name: Swift.String? = nil, profile: Swift.String? = nil, country: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var name: Swift.String? {
          get
          set
        }
        public var profile: Swift.String? {
          get
          set
        }
        public var country: Swift.String? {
          get
          set
        }
      }
      public struct Mark : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(userId: Swift.String? = nil, messageId: Swift.String? = nil, sortId: Swift.String? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var userId: Swift.String? {
          get
          set
        }
        public var messageId: Swift.String? {
          get
          set
        }
        public var sortId: Swift.String? {
          get
          set
        }
      }
    }
  }
  @objc deinit
}
final public class SubscriptionsQuery : Apollo.GraphQLQuery {
  final public let operationDefinition: Swift.String
  final public let operationName: Swift.String
  final public var projectId: Swift.String
  final public var option: Swift.String
  final public var filter: Swift.String
  final public var sort: Swift.String?
  public init(projectId: Swift.String, option: Swift.String, filter: Swift.String, sort: Swift.String? = nil)
  final public var variables: Apollo.GraphQLMap? {
    get
  }
  public struct Data : Apollo.GraphQLSelectionSet {
    public static let possibleTypes: [Swift.String]
    public static var selections: [Apollo.GraphQLSelection] {
      get
    }
    public var resultMap: Apollo.ResultMap {
      get
    }
    public init(unsafeResultMap: Apollo.ResultMap)
    public init(subscriptions: NcloudChat.SubscriptionsQuery.Data.Subscription? = nil)
    public var subscriptions: NcloudChat.SubscriptionsQuery.Data.Subscription? {
      get
      set
    }
    public struct Subscription : Apollo.GraphQLSelectionSet {
      public static let possibleTypes: [Swift.String]
      public static var selections: [Apollo.GraphQLSelection] {
        get
      }
      public var resultMap: Apollo.ResultMap {
        get
      }
      public init(unsafeResultMap: Apollo.ResultMap)
      public init(totalCount: Swift.Int, edges: [NcloudChat.SubscriptionsQuery.Data.Subscription.Edge?]? = nil)
      public var __typename: Swift.String {
        get
        set
      }
      public var totalCount: Swift.Int {
        get
        set
      }
      public var edges: [NcloudChat.SubscriptionsQuery.Data.Subscription.Edge?]? {
        get
        set
      }
      public struct Edge : Apollo.GraphQLSelectionSet {
        public static let possibleTypes: [Swift.String]
        public static var selections: [Apollo.GraphQLSelection] {
          get
        }
        public var resultMap: Apollo.ResultMap {
          get
        }
        public init(unsafeResultMap: Apollo.ResultMap)
        public init(node: NcloudChat.SubscriptionsQuery.Data.Subscription.Edge.Node? = nil)
        public var __typename: Swift.String {
          get
          set
        }
        public var node: NcloudChat.SubscriptionsQuery.Data.Subscription.Edge.Node? {
          get
          set
        }
        public struct Node : Apollo.GraphQLSelectionSet {
          public static let possibleTypes: [Swift.String]
          public static var selections: [Apollo.GraphQLSelection] {
            get
          }
          public var resultMap: Apollo.ResultMap {
            get
          }
          public init(unsafeResultMap: Apollo.ResultMap)
          public init(id: Apollo.GraphQLID, user: NcloudChat.SubscriptionsQuery.Data.Subscription.Edge.Node.User? = nil, channelId: Swift.String, userId: Swift.String, online: Swift.Bool? = nil, push: Swift.Bool? = nil, createdAt: Swift.String? = nil)
          public var __typename: Swift.String {
            get
            set
          }
          public var id: Apollo.GraphQLID {
            get
            set
          }
          public var user: NcloudChat.SubscriptionsQuery.Data.Subscription.Edge.Node.User? {
            get
            set
          }
          public var channelId: Swift.String {
            get
            set
          }
          public var userId: Swift.String {
            get
            set
          }
          public var online: Swift.Bool? {
            get
            set
          }
          public var push: Swift.Bool? {
            get
            set
          }
          public var createdAt: Swift.String? {
            get
            set
          }
          public struct User : Apollo.GraphQLSelectionSet {
            public static let possibleTypes: [Swift.String]
            public static var selections: [Apollo.GraphQLSelection] {
              get
            }
            public var resultMap: Apollo.ResultMap {
              get
            }
            public init(unsafeResultMap: Apollo.ResultMap)
            public init(name: Swift.String? = nil, profile: Swift.String? = nil, country: Swift.String? = nil)
            public var __typename: Swift.String {
              get
              set
            }
            public var name: Swift.String? {
              get
              set
            }
            public var profile: Swift.String? {
              get
              set
            }
            public var country: Swift.String? {
              get
              set
            }
          }
        }
      }
    }
  }
  @objc deinit
}
extension NcloudChat.CloudChat {
  public func addUsers(channelId: Swift.String, memberIds: [Swift.String], completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func removeUsers(channelId: Swift.String, memberIds: [Swift.String], completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func getUsers(filter: Swift.Dictionary<Swift.String, Any>, sort: Swift.Dictionary<Swift.String, Any>?, option: Swift.Dictionary<Swift.String, Any>, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func banUser(channelId: Swift.String, memberId: Swift.String, options: Swift.Dictionary<Swift.String, Any>, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func unbanUser(channelId: Swift.String, memberId: Swift.String, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func getFriendships(filter: Swift.Dictionary<Swift.String, Any>, sort: Swift.Dictionary<Swift.String, Any>?, option: Swift.Dictionary<Swift.String, Any>?, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func requestFriendship(friendId: Swift.String, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func acceptFriendship(friendId: Swift.String, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func rejectFriendship(friendId: Swift.String, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func deleteFriendship(friendId: Swift.String, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
}
extension NcloudChat.CloudChat {
  public func getPin(id: Swift.String, channelId: Swift.String, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func getPins(channelId: Swift.String, filter: Swift.Dictionary<Swift.String, Any>, option: Swift.Dictionary<Swift.String, Any>?, sort: Swift.Dictionary<Swift.String, Any>?, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func createPin(channelId: Swift.String, pinned: Swift.Bool, pinnedAt: Swift.String?, expiredAt: Swift.String?, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public func updatePin(id: Swift.String, channelId: Swift.String, pinned: Swift.Bool, pinnedAt: Swift.String?, expiredAt: Swift.String?, completionHandler: @escaping (NcloudChat.CloudChat.Result<Any?, NcloudChat.CustomError>) -> Swift.Void)
  public static func applicationWillEnterForeground()
  public static func applicationDidEnterBackground()
}
public enum CustomError : Swift.Error {
  case failToConnect
  case failToDisconnect
  case noProjectId
  case noSocket
  case noFile
  case noFileName
  case noMimeType
  case noMessage
  case noThreadId
  case noUser
  case noUserId
  case noChannelId
  case noChannelType
  case noChannelName
  case noSubscriptionId
  case noPinId
  case notInitialized
  case failed(message: Swift.String)
}
extension NcloudChat.CustomError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
